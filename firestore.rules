rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }

    function isTeacher() {
      return isAuthenticated() && getUserRole() == 'teacher';
    }

    function isStudent() {
      return isAuthenticated() && getUserRole() == 'student';
    }

    function hasAccessToClass(classId) {
      let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      let classData = get(/databases/$(database)/documents/classes/$(classId)).data;
      return (userData.classes.hasAny([classId]) || 
              userData.role == 'admin' || 
              classData.teacher_id == request.auth.uid);
    }

    function isEnrolledInClass(classId) {
      let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      let classData = get(/databases/$(database)/documents/classes/$(classId)).data;
      return userData.classes.hasAny([classId]) || 
             (classData.enrolledStudents != null && classData.enrolledStudents.hasAny([request.auth.uid]));
    }

    function isStudentAnswer(studentId) {
      return studentId == request.auth.uid || studentId == request.auth.id;
    }

    // Student Answers - nested structure
    match /student-answers/{classId}/answers/{answerId} {
      allow read: if isAuthenticated() && (
        // Students can read their own answers
        (isStudent() && isStudentAnswer(resource.data.studentId)) ||
        // Teachers can read all answers for their class
        (isTeacher() && hasAccessToClass(classId)) ||
        // Admins can read all answers
        isAdmin()
      );
      
      allow create, update: if isAuthenticated() && (
        // Students can write their own answers
        (isStudent() && isStudentAnswer(request.resource.data.studentId)) ||
        // Teachers can write for their class
        (isTeacher() && hasAccessToClass(classId)) ||
        // Admins can write anything
        isAdmin()
      );
    }

    // Student Progress collection
    match /student-progress/{progressId} {
      allow read: if isAuthenticated() && (
        // Students can read their own progress
        (isStudent() && isStudentAnswer(resource.data.studentId)) ||
        // Teachers can read all progress for their class
        (isTeacher() && hasAccessToClass(resource.data.classId)) ||
        // Admins can read all progress
        isAdmin()
      );
      
      allow create, update: if isAuthenticated() && (
        // Students can write their own progress
        (isStudent() && isStudentAnswer(request.resource.data.studentId)) ||
        // Teachers can write for their class
        (isTeacher() && hasAccessToClass(request.resource.data.classId)) ||
        // Admins can write anything
        isAdmin()
      );
    }

    // Student Completions collection
    match /student-completions/{completionId} {
      allow read: if isAuthenticated() && (
        // Students can read their own completions
        (isStudent() && isStudentAnswer(resource.data.studentId)) ||
        // Teachers can read all completions for their class
        (isTeacher() && hasAccessToClass(resource.data.classId)) ||
        // Admins can read all completions
        isAdmin()
      );
      
      allow create, update: if isAuthenticated() && (
        // Students can write their own completions
        (isStudent() && isStudentAnswer(request.resource.data.studentId)) ||
        // Teachers can write for their class
        (isTeacher() && hasAccessToClass(request.resource.data.classId)) ||
        // Admins can write anything
        isAdmin()
      );
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || (request.auth.uid == userId);
    }

    // Classes collection
    match /classes/{classId} {
      allow read: if isAuthenticated();
      allow write: if isTeacher() || isAdmin();
    }

    // Published Assignments collection
    match /published_assignments/{assignmentId} {
      allow read: if isAuthenticated();
      allow write: if isTeacher() || isAdmin();
    }

    // Published Curricula collection
    match /published_curricula/{curriculumId} {
      allow read: if isAuthenticated();
      allow write: if isTeacher() || isAdmin();
    }
  }
} 