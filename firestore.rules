rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isTeacher() {
      return isAuthenticated() && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    function isStudent() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    function hasAccessToClass(classId) {
      let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      let classData = get(/databases/$(database)/documents/classes/$(classId)).data;
      return (userData.classes.hasAny([classId]) || 
              userData.role == 'admin' || 
              classData.teacher_id == request.auth.uid);
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId || 
        isTeacher() || 
        isAdmin()
      );
      allow write: if isAdmin();
    }

    // Classes collection
    match /classes/{classId} {
      allow read: if isAuthenticated();
      allow write: if isTeacher() || isAdmin();
    }

    // Student Answers collection - new nested structure
    match /student-answers/{classId}/answers/{answerId} {
      allow read: if isAuthenticated() && (
        // Students can read their own answers
        (isStudent() && resource.data.studentId == request.auth.uid) ||
        // Teachers can read all answers in their classes
        (isTeacher() && hasAccessToClass(classId))
      );
      allow create: if isAuthenticated() && (
        // Students can create their own answers
        (isStudent() && request.resource.data.studentId == request.auth.uid) ||
        // Teachers can create answers for grading
        (isTeacher() && hasAccessToClass(classId))
      );
      allow update: if isAuthenticated() && (
        // Students can update their own answers
        (isStudent() && resource.data.studentId == request.auth.uid) ||
        // Teachers can update answers for grading
        (isTeacher() && hasAccessToClass(classId))
      );
      allow delete: if isAuthenticated() && (
        // Teachers can delete answers in their classes
        (isTeacher() && hasAccessToClass(classId)) ||
        // Admins can delete any answers
        isAdmin()
      );
    }

    // Student Progress collection
    match /student-progress/{progressId} {
      allow read: if isAuthenticated() && (
        // Students can read their own progress
        (isStudent() && resource.data.studentId == request.auth.uid) ||
        // Teachers can read all progress in their classes
        (isTeacher() && hasAccessToClass(resource.data.classId))
      );
      allow write: if isAuthenticated() && (
        // Students can write their own progress
        (isStudent() && request.resource.data.studentId == request.auth.uid) ||
        // Teachers can write progress for grading
        (isTeacher() && hasAccessToClass(request.resource.data.classId))
      );
    }

    // Published Assignments collection
    match /published_assignments/{assignmentId} {
      allow read: if isAuthenticated();
      allow write: if isTeacher() || isAdmin();
    }

    // Published Curricula collection
    match /published_curricula/{curriculumId} {
      allow read: if isAuthenticated();
      allow write: if isTeacher() || isAdmin();
    }
  }
} 